import numpy as np

class DistanceCalculator:
    def __init__(self, database):
        self.database = np.array(database)

    def euclidean(self, a, b):
        return np.linalg.norm(a - b)

    def euclidean_normalized(self, a, b):
        norm_a = a / np.linalg.norm(a)
        norm_b = b / np.linalg.norm(b)
        return np.linalg.norm(norm_a - norm_b)

    def chebyshev(self, a, b):
        return np.max(np.abs(a - b))

    def manhattan(self, a, b):
        return np.sum(np.abs(a - b))

    def find_similar(self, distance_function_name, new_instance):
        distance_function = getattr(self, distance_function_name)
        distances = [distance_function(new_instance, db_vector) for db_vector in self.database]
        
        # Obtener los índices de los vectores más cercanos
        sorted_indices = np.argsort(distances)
        
        # Devolver los vectores más similares (puedes elegir cuántos devolver)
        similar_vectors = self.database[sorted_indices]
        return similar_vectors
